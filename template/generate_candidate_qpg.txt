You are an experienced database expert.
Now you need to generate a SQL query given the database information, a question and some additional information.
The database structure is defined by the following table schemas (comments after '--' provide additional column descriptions).
Note that the "Example Values" are actual values from the column. Some column might contain the values that are directly related to the question. Use it to help you justify which columns to use.

Given the table schema information description and the `Question`. You will be given table creation statements and you need understand the database and columns.

You will be using a way called "Query Plan Guided SQL Generation" to generate the SQL query. This method involves breaking down the question into smaller sub-questions and then assembling them to form the final SQL query. This approach helps in understanding the question requirements and structuring the SQL query efficiently.

Database admin instructions (voliating any of the following will result is punishble to death!):
1. **SELECT Clause:** 
    - Only select columns mentioned in the user's question. 
    - Avoid unnecessary columns or values.
2. **Aggregation (MAX/MIN):**
    - Always perform JOINs before using MAX() or MIN().
3. **ORDER BY with Distinct Values:**
    - Use `GROUP BY <column>` before `ORDER BY <column> ASC|DESC` to ensure distinct values.
4. **Handling NULLs:**
    - If a column may contain NULL values (indicated by "None" in value examples or explicitly), use `JOIN` or `WHERE <column> IS NOT NULL`.
5. **FROM/JOIN Clauses:**
    - Only include tables essential to answer the question.
6. **Strictly Follow Hints:**
    - Adhere to all provided hints.
7. **Thorough Question Analysis:**
    - Address all conditions mentioned in the question.
8. **DISTINCT Keyword:**
    - Use `SELECT DISTINCT` when the question requires unique values (e.g., IDs, URLs). 
    - Refer to column statistics ("Value Statics") to determine if `DISTINCT` is necessary.
9. **Column Selection:**
    - Carefully analyze column descriptions and hints to choose the correct column when similar columns exist across tables.
10. **String Concatenation:**
    - Never use `|| ' ' ||` or any other method to concatenate strings in the `SELECT` clause. 
11. **JOIN Preference:**
    - Prioritize `INNER JOIN` over nested `SELECT` statements.
12. **SQLite Functions Only:**
    - Use only functions available in SQLite.
13. **Date Processing:**
    - Utilize `STRFTIME()` for date manipulation (e.g., `STRFTIME('%Y', SOMETIME)` to extract the year).

When you get to the final query, output the query string ONLY inside the xml delimiter <FINAL_ANSWER></FINAL_ANSWER>.

Here are some examples

======= Example =======
**************************
【Table creation statements】
/* The 'generalinfo' table stores general information about restaurants, including their unique identifier, food type, and city location. */
CREATE TABLE generalinfo (
  /* The unique identifier for each restaurant. This column serves as the primary key, ensuring that each restaurant can be distinctly referenced. */
  /* Sample Data: 1, 2, 3 */
  id_restaurant INTEGER NOT NULL PRIMARY KEY,

  /* Represents the type of food served at the restaurant. This column stores the food type as text, which can be NULL if the information is unavailable or unspecified. */
  /* Sample Data: 'thai', 'italian', 'mexican' */
  food_type TEXT NULL,

  /* Represents the city where the restaurant is located. This column stores the city name as text and can be NULL if the city is unknown or not provided. */
  /* Sample Data: 'Bangkok', 'Rome', 'Los Angeles' */
  city TEXT NULL
);

/* The 'location' table stores detailed location information for restaurants, including the street name and city, and links to the 'generalinfo' table using the restaurant's unique identifier. */
CREATE TABLE location (
  /* The unique identifier for each restaurant. This column serves as the primary key and ensures that each restaurant's location can be distinctly referenced. */
  /* Sample Data: 1, 2, 3 */
  id_restaurant INTEGER NOT NULL PRIMARY KEY,

  /* Represents the street name where the restaurant is located. This column stores the street name as text, and it can be NULL if the information is unavailable. */
  /* Sample Data: 'Ave', 'San Pablo Ave', 'Pablo Ave' */
  street_name TEXT NULL,

  /* Represents the city where the restaurant is located. This column stores the city name as text and can be NULL if the city information is unavailable. */
  /* Sample Data: 'San Francisco', 'Los Angeles', 'New York' */
  city TEXT NULL,

  /* Establishes a foreign key relationship with the 'generalinfo' table's 'id_restaurant' column. The 'ON UPDATE CASCADE' and 'ON DELETE CASCADE' clauses ensure that changes to or deletions of the referenced restaurant in 'generalinfo' will propagate to this table. */
  FOREIGN KEY (id_restaurant) REFERENCES generalinfo (id_restaurant) ON UPDATE CASCADE ON DELETE CASCADE
);

**************************
【Question】
Question: 
How many Thai restaurants can be found in San Pablo Ave, Albany? 

Evidence:
Thai restaurant refers to food_type = 'thai'; San Pablo Ave Albany refers to street_name = 'san pablo ave' AND T1.city = 'albany'

**************************
【Answer】
Repeating the question and evidence, and generating the SQL with Recursive Divide-and-Conquer.
**Question**: How many Thai restaurants can be found in San Pablo Ave, Albany? 
**Evidence**: Thai restaurant refers to food_type = 'thai'; San Pablo Ave Albany refers to street_name = 'san pablo ave' AND T1.city = 'albany'

**Query Plan**:

** Preparation Steps:**
1. Initialize the process: Start preparing to execute the query.
2. Prepare storage: Set up storage space (registers) to hold temporary results, initializing them to NULL.
3. Open the location table: Open the location table so we can read from it.
4. Open the generalinfo table: Open the generalinfo table so we can read from it.

** Matching Restaurants:**
1. Start reading the location table: Move to the first row in the location table.
2. Check if the street matches: Look at the street_name column of the current row in location. If it’s not "san pablo ave," skip this row.
3. Identify the matching row: Store the identifier (row ID) of this location entry.
4. Find the corresponding row in generalinfo: Use the row ID from location to directly find the matching row in generalinfo.
5. Check if the food type matches: Look at the food_type column in generalinfo. If it’s not "thai," skip this row.
6. Check if the city matches: Look at the city column in generalinfo. If it’s not "albany," skip this row.

** Counting Restaurants:**
1. Prepare to count this match: If all checks pass, prepare to include this row in the final count.
2. Count this match: Increment the count for each row that meets all the criteria.
3. Move to the next row in location: Go back to the location table and move to the next row, repeating the process until all rows are checked.
4. Finalize the count: Once all rows have been checked, finalize the count of matching rows.
5. Prepare the result: Copy the final count to prepare it for output.

** Delivering the Result:**
1. Output the result: Output the final count, which is the number of restaurants that match all the specified criteria.
2. End the process: Stop the query execution process.
3. Setup phase: Before starting the actual query execution, the system prepares the specific values it will be looking for, like "san pablo ave," "thai," and "albany."

**Final Optimized SQL Query:**

<FINAL_ANSWER>
SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'thai' AND T1.city = 'albany' AND T2.street_name = 'san pablo ave'
</FINAL_ANSWER> 

===========
Example 1
**************************
【Database Info】
/* The 'account' table stores information about user accounts, including the account's unique identifier, its associated district, the frequency of account activities, and the date the record was created or last updated. */
CREATE TABLE account (
/* The unique identifier for each account. It serves as the primary key and ensures that each account can be distinctly referenced. */
/* Sample Data: 1, 2, 3 */
account_id INT PRIMARY KEY,
/* References the 'district_id' in the 'district' table, linking the account to a specific district. This establishes a relationship between accounts and their geographical or organizational grouping. */
/* Sample Data: 1, 2, 3 */
district_id INT REFERENCES district(district_id),
/* Indicates how often the account is active or engaged. This column is important for understanding account usage patterns, and it cannot be NULL to ensure that activity frequency is always recorded. */
/* Sample Data: often, often, always */
frequency VARCHAR(255) NOT NULL,
/* Stores the date when the account record was created or last updated. This column is crucial for tracking changes or additions to account information over time. */
/* Sample Data: 2012-08-24,2012-08-24,2012-08-24 */
date DATE NOT NULL,
);

/* The 'client' table stores information about individual clients, including their unique identifier, gender, birth date, and associated district. */
CREATE TABLE client (
/* The unique identifier for each client. It serves as the primary key and ensures that each client can be distinctly referenced. */
/* Sample Data: 1, 2, 3 */
client_id INT PRIMARY KEY,
/* Stores the gender of the client. It is represented as a single character (e.g., 'M' for male, 'F' for female), and it cannot be NULL to ensure that this critical information is always recorded. */
/* Sample Data: M, F, M */
gender CHAR(1) NOT NULL,
/* Stores the birth date of the client. This is essential for tracking client demographics and may be used for age-related queries. It cannot be NULL to ensure valid data entry. */
/* Sample Data: 1980-05-15, 1992-10-20, 1975-01-03 */
birth_date DATE NOT NULL,
/* References the 'district_id' in the 'district' table, linking the client to a specific district. This column establishes the geographical or organizational relationship of the client. */
/* Sample Data: 1, 2, 3 */
district_id INT REFERENCES district(district_id),
);

/* The 'district' table stores information about districts, including a unique identifier and two key attributes (a4 and a11), which represent district-specific data. */
CREATE TABLE district (
/* The unique identifier for each district. It serves as the primary key and ensures that each district can be distinctly referenced. */
/* Sample Data: 1, 2, 3 */
district_id INT PRIMARY KEY, 
/* Stores a key attribute of the district, referred to as 'a4'. This column holds string data (likely representing a particular characteristic of the district) and cannot be NULL to ensure essential data is recorded. */
/* Sample Data: "District A", "District B", "District C" */
a4 VARCHAR(255) NOT NULL,
/* Stores another key attribute of the district, referred to as 'a11'. Like 'a4', this is a string and holds significant district-related information, with a non-NULL constraint to ensure that it is always filled. */
/* Sample Data: "Region 1", "Region 2", "Region 3" */
a11 VARCHAR(255) NOT NULL,
);

**************************
【Question】
Question: What is the gender of the youngest client who opened account in the lowest average salary branch?
Hint: Given that Later birthdate refers to younger age; A11 refers to average salary

**************************
【Answer】
Repeating the question and hint, and generating the SQL with Recursive Divide-and-Conquer.
**Question**: What is the gender of the youngest client who opened account in the lowest average salary branch?
**Hint**: Given that Later birthdate refers to younger age; A11 refers to average salary

**Query Plan**:

** Preparation Steps: **
1. Initialize the process: Begin setting up the necessary environment to execute the query efficiently.
2. Open required tables: Access the client, account, and district tables to retrieve relevant data.
3. Prepare temporary storage: Allocate space to store intermediate results such as the lowest average salary and corresponding district information.

** Identify the Branch with Lowest Average Salary: **
1. Scan the district table: Retrieve all records from the district table to analyze average salaries.
2. Extract average salaries: For each district, note the value in the A11 column, which represents the average salary.
3. Determine the lowest salary: Compare all extracted average salaries to identify the minimum value.
4. Store corresponding district_id: Record the district_id associated with the lowest average salary for further processing.

** Find Clients in the Identified District: **
1. Join client and account tables: Merge records where client.client_id matches account.account_id to associate clients with their accounts.
2. Filter by district_id: Select only those records where account.district_id matches the previously identified district_id with the lowest average salary.
3. Handle potential duplicates: Ensure that each client is uniquely identified even if they have multiple accounts in the same district.

** Identify the Youngest Client: **
1. Extract birth dates: From the filtered client records, retrieve the birth_date for each client.
2. Determine the latest birth date: Identify the most recent (latest) birth date, indicating the youngest client among the filtered list.
3. Handle ties in birth dates: If multiple clients share the same latest birth date, prepare to handle multiple results or decide on additional criteria to select a single client.

** Retrieve Gender Information: **
1. Select the gender column: From the record(s) of the youngest client(s), extract the value in the gender column.
2. Prepare the result: Format the retrieved gender information for presentation, ensuring clarity and correctness.

** Finalize and Deliver the Result: **
1. Compile the final result: Organize the extracted gender information into a coherent and understandable output.
2. Clean up resources: Close any open table connections and release temporary storage used during query execution.
3. Output the result: Present the gender of the youngest client who opened an account in the branch with the lowest average salary.

**Final Optimized SQL Query:**

<FINAL_ANSWER>
SELECT `T1`.`gender`
  FROM `client` AS `T1`
  INNER JOIN `district` AS `T2`
  ON `T1`.`district_id` = `T2`.`district_id`
  ORDER BY `T2`.`A11` ASC, `T1`.`birth_date` DESC NULLS LAST
  LIMIT 1
</FINAL_ANSWER>

===========
Example 2 (dividing into two parallel sub-questions)
**************************
【Database Info】
/* The 'games' table stores information about individual games, including a unique identifier and the year the game was played. */
CREATE TABLE games
(
    /* The unique identifier for each game. It serves as the primary key and ensures that each game can be distinctly referenced. */
    /* Sample Data: 1, 2, 3 */
    id INTEGER NOT NULL PRIMARY KEY,
    /* Represents the year in which the game was played. It allows for filtering and sorting games by year, and it can be NULL if the year is not specified. */
    /* Sample Data: 2020, 2021, 2022 */
    games_year INTEGER DEFAULT NULL -- `games year` description: the year of the game
);

/* The 'games_city' table stores the relationship between games and the cities where they were held. It links the game and city by their respective identifiers. */
CREATE TABLE games_city
(
    /* References the 'id' from the 'games' table, linking the game to a specific record in the 'games' table. It can be NULL if the game is not associated with a city. */
    /* Sample Data: 1, 2, 3 */
    games_id INTEGER DEFAULT NULL,
    
    /* References the 'id' from the 'city' table, linking the city to a specific record in the 'city' table. It can be NULL if the city is not associated with a game. */
    /* Sample Data: 1, 2, 3 */
    city_id INTEGER DEFAULT NULL, -- `city id` description: the id of the city that held the game Maps to city(id)
    
    /* Foreign key constraint, enforcing a relationship between 'games_city' and 'city'. Ensures that the city referenced exists in the 'city' table. */
    FOREIGN KEY (city_id) REFERENCES city(id),
    
    /* Foreign key constraint, enforcing a relationship between 'games_city' and 'games'. Ensures that the game referenced exists in the 'games' table. */
    FOREIGN KEY (games_id) REFERENCES games(id)
);

/* The 'city' table stores information about individual cities, including a unique identifier and the name of the city. */
CREATE TABLE city
(
    /* The unique identifier for each city. It serves as the primary key and ensures that each city can be distinctly referenced. */
    /* Sample Data: 1, 2, 3 */
    id INTEGER NOT NULL PRIMARY KEY,
    
    /* Stores the name of the city. This column holds text data, allowing for the storage of city names. It can be NULL if no city name is provided, though this is unlikely. */
    /* Sample Data: "London", "Paris", "New York" */
    city_name TEXT DEFAULT NULL -- examples: `London`
);

**************************
【Question】
Question:
From 1900 to 1992, how many games did London host?

Hint:
From 1900 to 1992 refers to games_year BETWEEN 1900 AND 1992; London refers to city_name = 'London'; games refer to games_name;

**************************
【Answer】

Repeating the question and hint, and generating the SQL with Recursive Divide-and-Conquer.
**Question**: From 1900 to 1992, how many games did London host?
**Hint**: From 1900 to 1992 refers to games_year BETWEEN 1900 AND 1992; London refers to city_name = 'London'; games refer to games_name;

**Query Plan**:

** Preparation Steps: **
1.Initialize the process: Set up the environment to begin query execution, including necessary variables and temporary storage.
2. Open required tables: Open the games_city, city, and games tables to access relevant data.
3. Prepare filtering values: Set up the specific values to filter the data, such as the year range (1900-1992) and the city name 'London'.

** Filter and Identify Relevant Data: **
1. Scan games_city table: Retrieve records from the games_city table to match games with the cities where they were hosted.
2. Fetch the corresponding city_id: For each row in games_city, extract the city_id to find out which city hosted the game.
3 .Match city_id with city_name: Use the city_id to look up the corresponding city_name in the city table.
4. Filter by city_name = 'London': Select only those rows where the city_name is 'London'.

** Further Filter by Year Range: **
1. Extract games_id: For rows that match 'London', retrieve the games_id from the games_city table.
2. Find matching games_year: Use the games_id to look up the corresponding games_year in the games table.
3. Filter by games_year between 1900 and 1992: Select only those rows where the games_year falls within the specified range (1900-1992).

** Count the Matching Rows: **
1. Initialize the count: Prepare to count the number of matching rows that meet all the criteria.
2. Count the valid entries: For each row that matches the conditions (city_name = 'London' and games_year between 1900 and 1992), increment the count.
3. Store the final count: Once all rows have been processed, store the total count as the final result.

** Finalize and Deliver the Result: **
1. Prepare the result for output: Format the final count of games hosted by London between 1900 and 1992.
2. Output the final count: Deliver the count as the query result.
3. Clean up resources: Close any open table connections and release temporary storage used during query execution.

**Final Optimized SQL Query:**

<FINAL_ANSWER>
SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' AND T3.games_year BETWEEN 1900 AND 1992
</FINAL_ANSWER> 

=============

Example 3
**************************
【Table creation statements】
/* The 'employees' table stores information about employees, including their unique identifier, the department they belong to, and their salary details. */
CREATE TABLE employees (
    /* The unique identifier for each employee. It serves as the primary key and ensures that each employee can be distinctly referenced. */
    /* Sample Data: 1, 2, 3 */
    employee_id INT PRIMARY KEY,

    /* References the 'department_id' in the 'departments' table, linking the employee to a specific department. This establishes a relationship between employees and their departments. */
    /* Sample Data: 101, 102, 103 */
    department_id INT,

    /* Stores the salary of the employee. It is represented as an integer, indicating the amount the employee is paid. This column could be subject to constraints such as non-negative values. */
    /* Sample Data: 50000, 60000, 70000 */
    salary INT
);

**************************
【Question】
Question: How many employees earn over $100,000?

**************************
【Answer】
Repeating the question and hint, and generating the SQL with Recursive Divide-and-Conquer.
**Question:** How many employees earn over $100,000?

** Query Plan**:

** Preparation Steps: **
1.cInitialize the process: Begin by setting up the environment for query execution, including initializing variables and temporary storage.
2. Open the employees table: Access the employees table to retrieve the relevant data.

** Filtering Employees by Salary: **
1. Scan the employees table: Begin reading rows from the employees table.
2. Fetch the salary column: For each row, retrieve the value from the salary column.
3. Compare salary against $100,000: Check if the salary value is greater than $100,000.
4. Identify matching rows: For rows where the salary exceeds $100,000, prepare to count these entries.

** Counting the Matches: **
1. Initialize the count: Set up a counter to keep track of how many employees meet the salary condition.
2. Increment the count: For each row where the salary is above $100,000, increment the counter.
3. Store the final count: Once all rows have been processed, store the total count of matching employees.

** Finalize and Deliver the Result: **
1. Prepare the result for output: Format the final count for presentation.
2. Output the final count: Deliver the count as the query result, indicating how many employees earn over $100,000.
3. Clean up resources: Close the employees table and release any temporary storage used during query execution.

**Final Optimized SQL Query:**

<FINAL_ANSWER>
SELECT COUNT(*) FROM employees WHERE salary > 100000;
</FINAL_ANSWER>

====== Example 5 =======
**************************
【Table creation statements】
/* The 'Airlines' table stores flight details, including the date of the flight, the origin airport, and the destination airport. It links to the 'Airports' table via foreign keys to define the origin and destination airports. */
CREATE TABLE Airlines
(
    /* Stores the date of the flight. This column is represented as text, capturing the flight's departure date in a string format (e.g., '2018/8/9'). */
    /* Sample Data: '2018/8/9', '2019/5/15', '2020/12/1' */
    FL_DATE TEXT, -- examples: `2018/8/9`| `flight date` description: flight date
    
    /* Stores the code of the airport of origin. This is linked to the 'Airports' table by the 'Code' column. It represents the airport from which the flight departs. */
    /* Sample Data: 'SAN', 'LAX', 'JFK' */
    ORIGIN TEXT, -- examples: `SAN`| description: airport of origin
    
    /* Stores the code of the destination airport. This is linked to the 'Airports' table by the 'Code' column. It represents the airport where the flight arrives. */
    /* Sample Data: 'SAN', 'LAX', 'JFK' */
    DEST TEXT, -- examples: `SAN`| `destination` description: Destination airport
    
    /* Foreign key constraint linking the 'ORIGIN' column to the 'Code' column in the 'Airports' table, ensuring that the origin airport exists in the 'Airports' table. */
    FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
    
    /* Foreign key constraint linking the 'DEST' column to the 'Code' column in the 'Airports' table, ensuring that the destination airport exists in the 'Airports' table. */
    FOREIGN KEY (DEST) REFERENCES Airports(Code)
);

/* The 'Airports' table stores information about airports, including their unique codes and descriptions. */
CREATE TABLE Airports
(
    /* The unique identifier for each airport. It serves as the primary key and ensures that each airport can be distinctly referenced. This code is typically an IATA or ICAO airport code. */
    /* Sample Data: 'SAN', 'LAX', 'JFK' */
    Code TEXT PRIMARY KEY,
    
    /* Provides a description of the airport, such as its full name or other details. This column is important for providing more context about each airport. */
    /* Sample Data: 'San Diego International', 'Los Angeles International', 'John F. Kennedy International' */
    Description TEXT
);

**************************
【Question】
Question: 
How many flights were there from San Diego International airport to Los Angeles International airport in the August of 2018? 

Evidence:
flights from refers to ORIGIN; San Diego International airport refers to Description = 'San Diego, CA: San Diego International'; flights to refers to DEST; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; in the August of 2018 refers to FL_DATE like '2018/8%';


**************************
【Answer】
**Repeating the question and evidence, and generating the SQL with Recursive Divide-and-Conquer.**

**Question**: How many flights were there from San Diego International airport to Los Angeles International airport in the August of 2018? 
**Evidence**: flights from refers to ORIGIN; San Diego International airport refers to Description = 'San Diego, CA: San Diego International'; flights to refers to DEST; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; in the August of 2018 refers to FL_DATE like '2018/8%';

** Query Plan**:

** Preparation Steps: **
1. Initialize the process: Set up the environment and prepare for query execution by initializing variables and temporary storage.
2. Open required tables: Open the Airlines and Airports tables to access relevant data.

** Identify Relevant Flights: **
1. Fetch the FL_DATE column: Start reading the FL_DATE column from the Airlines table.
2. Filter by August 2018: Use the condition FL_DATE LIKE '2018/8%' to filter flights that occurred in August 2018.
3. Join with Airports for ORIGIN: Identify flights originating from 'San Diego, CA: San Diego International' by joining the Airlines table with the Airports table on the ORIGIN field.
4. Join with Airports for DEST: Similarly, identify flights destined for 'Los Angeles, CA: Los Angeles International' by joining the Airlines table with the Airports table on the DEST field.

** Count the Matching Flights: **
1. Initialize the count: Set up a counter to keep track of how many flights match the criteria.
2. Increment the count: For each flight that meets the conditions (originating from San Diego International and destined for Los Angeles International in August 2018), increment the counter.
3. Store the final count: Once all rows have been processed, store the total count of matching flights.

** Finalize and Deliver the Result: **
1. Prepare the result for output: Format the final count for presentation, ensuring clarity and correctness.
2. Output the final count: Deliver the count as the query result, indicating how many flights met the specified criteria.
3. Clean up resources: Close any open table connections and release temporary storage used during query execution.

**Final Optimized SQL Query:**

<FINAL_ANSWER>
SELECT COUNT(FL_DATE) FROM Airlines WHERE FL_DATE LIKE '2018/8%' AND ORIGIN = ( SELECT T2.ORIGIN FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'San Diego, CA: San Diego International' ) AND DEST = ( SELECT T4.DEST FROM Airports AS T3 INNER JOIN Airlines AS T4 ON T3.Code = T4.DEST WHERE T3.Description = 'Los Angeles, CA: Los Angeles International' )
</FINAL_ANSWER> 

===== Example 5 ========

**************************
【Table creation statements】
/* The 'businesses' table stores information about individual businesses, such as eateries, including their unique identifier and name. */
CREATE TABLE businesses
(
    /* The unique identifier for each business. It serves as the primary key and ensures that each business can be distinctly referenced. */
    /* Sample Data: 1, 2, 3 */
    `business_id` INTEGER NOT NULL,
    
    /* Stores the name of the business, such as the name of the eatery. This column is important for identifying the business by its name and cannot be NULL. */
    /* Sample Data: 'Joe’s Diner', 'Pizza Palace', 'Sushi Spot' */
    `name` TEXT NOT NULL, -- description: the name of the eatery
    
    /* Declares the primary key constraint on 'business_id', ensuring each business has a unique identifier. */
    PRIMARY KEY (`business_id`)
);

/* The 'inspections' table stores inspection details for businesses, including the business identifier, inspection score, and the date of the inspection. */
CREATE TABLE inspections
(
    /* References the 'business_id' from the 'businesses' table, linking the inspection to a specific business. This ensures that each inspection is associated with an existing business. */
    /* Sample Data: 1, 2, 3 */
    `business_id` INTEGER NOT NULL, -- `business id` description: the unique id of the business
    
    /* Stores the score awarded during the inspection. This column captures the evaluation result of the business, with a default value of NULL if no score is assigned. */
    /* Sample Data: 85, 90, 76 */
    `score` INTEGER DEFAULT NULL, -- description: the inspection score
    
    /* Stores the date when the inspection took place. This column records the date in a standard date format (e.g., '2014-01-24') and cannot be NULL. */
    /* Sample Data: '2014-01-24', '2015-05-10', '2016-11-17' */
    `date` DATE NOT NULL, -- examples: `2014-01-24`
    
    /* Foreign key constraint, linking the 'business_id' column to the 'businesses' table, ensuring that the referenced business exists. */
    FOREIGN KEY (`business_id`) REFERENCES `businesses` (`business_id`)
);

/* The 'violations' table stores records of violations associated with businesses, including the business identifier and the date of the violation. */
CREATE TABLE violations
(
    /* References the 'business_id' from the 'businesses' table, linking the violation to a specific business. This ensures that each violation is associated with an existing business. */
    /* Sample Data: 1, 2, 3 */
    `business_id` INTEGER NOT NULL,
    
    /* Stores the date when the violation occurred. This column records the date in a standard date format (e.g., '2016-05-03') and cannot be NULL. */
    /* Sample Data: '2016-05-03', '2017-08-15', '2018-01-20' */
    `date` DATE NOT NULL, -- examples: `2016-05-03`
    
    /* Foreign key constraint, linking the 'business_id' column to the 'businesses' table, ensuring that the referenced business exists. */
    FOREIGN KEY (`business_id`) REFERENCES `businesses` (`business_id`)
);

**************************
【Question】
Question: 
What are the names of the establishments that met all the required standards for 4 consecutive years? 

Evidence:
establishment has the same meaning as business; score of 90 or more refers to score ≥ 90; year(date) = 2015; ; met all required standards for 4 consecutive years refers to COUNT(year(date)) = 4 where score = 100;


**************************
【Answer】
Repeating the question and evidence, and generating the SQL with Recursive Divide-and-Conquer.

**Question**: What are the names of the establishments that met all the required standards for 4 consecutive years? 
**Evidence**: establishment has the same meaning as business; score of 90 or more refers to score ≥ 90; year(date) = 2015; ; met all required standards for 4 consecutive years refers to COUNT(year(date)) = 4 where score = 100;

** Query Plan**:

** Preparation Steps: **
1. Initialize the process: Set up the environment and prepare for query execution, including initializing variables and temporary storage.
2. Open required tables: Open the businesses, inspections, and violations tables to access relevant data.

** Filter and Identify Relevant Inspections: **
1. Scan the inspections table: Start reading rows from the inspections table.
2. Filter by score of 100: Select only those inspections where the score is 100, indicating that the establishment met all required standards.
3. Extract year from the inspection date: Use the STRFTIME('%Y', date) function to extract the year from the inspection date.
4. Join with businesses table: Match each inspection to the corresponding business by joining on business_id.

** Identify Businesses Meeting Standards for 4 Consecutive Years: **
1. Aggregate by business and year: Group the data by business name and the extracted year to count the number of years each business met the required standards.
3. Apply row numbering: Use ROW_NUMBER() with a partition by business name and order by year to identify consecutive years.
3. Filter for 4 consecutive years: Group by business name and ensure that the count of years with the required score is exactly 4, indicating 4 consecutive years of meeting the standards.

** Count and Finalize the Results: **
1. Count the matching businesses: For each business, count the number of years that meet the criteria.
2. Select distinct business names: Extract the names of businesses that have met the required standards for 4 consecutive years.
3. Store and prepare the result: Once all businesses have been processed, store the result and prepare it for output.

** Deliver the Final Result: **
1. Prepare the result for output: Format the final list of business names for presentation.
2. Output the final result: Deliver the names of the businesses that met the required standards for 4 consecutive years.
3. Clean up resources: Close any open table connections and release temporary storage used during query execution.

**Final Optimized SQL Query:**

<FINAL_ANSWER>
SELECT DISTINCT T4.name FROM ( SELECT T3.name, T3.years, row_number() OVER (PARTITION BY T3.name ORDER BY T3.years) AS rowNumber FROM ( SELECT DISTINCT name, STRFTIME('%Y', `date`) AS years FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100 ) AS T3 ) AS T4 GROUP BY T4.name, date(T4.years || '-01-01', '-' || (T4.rowNumber - 1) || ' years') HAVING COUNT(T4.years) = 4
</FINAL_ANSWER>
===========

Now is the real question, following the instruction and examples, You should:
1. Generate a QUERY PLAN for the given question and evidence.
2. Return the final optimized SQL query.

**************************
【Table creation statements】
{schema}

**************************
【Question】
Question: 
{input_query}

Evidence:
{hint}

**************************
【Answer】
Repeating the question and hint, and generating the SQL with Recursive Divide-and-Conquer.